import heapq

# Definir el grafo del sistema de transporte masivo
class Grafo:
    def __init__(self):
        self.nodos = {}
    
    def agregar_nodo(self, nombre):
        """Agrega un nodo al grafo."""
        self.nodos[nombre] = {}
    
    def agregar_arista(self, desde, hacia, peso):
        """Agrega una arista bidireccional entre dos nodos."""
        self.nodos[desde][hacia] = peso
        self.nodos[hacia][desde] = peso  # Si es bidireccional

# Algoritmo de Dijkstra para encontrar la ruta más corta
def dijkstra(grafo, inicio, fin):
    cola_prioridad = [(0, inicio)]  # Cola de prioridad para explorar nodos
    distancias = {nodo: float('inf') for nodo in grafo.nodos}
    distancias[inicio] = 0
    camino = {nodo: None for nodo in grafo.nodos}
    
    while cola_prioridad:
        (distancia_actual, nodo_actual) = heapq.heappop(cola_prioridad)
        
        if nodo_actual == fin:  # Si alcanzamos el nodo final
            break
        
        for vecino, peso in grafo.nodos[nodo_actual].items():
            distancia = distancia_actual + peso
            if distancia < distancias[vecino]:  # Si encontramos una distancia menor
                distancias[vecino] = distancia
                camino[vecino] = nodo_actual
                heapq.heappush(cola_prioridad, (distancia, vecino))
    
    # Reconstruir la ruta
    ruta = []
    nodo = fin
    while nodo is not None:
        ruta.append(nodo)
        nodo = camino[nodo]
    ruta.reverse()  # Invertir para obtener la ruta desde el inicio al final
    
    return ruta, distancias[fin]

# Crear el grafo del sistema de transporte
grafo = Grafo()
# Agregar nodos
nodos = ["A", "B", "C", "D", "E", "F"]
for nodo in nodos:
    grafo.agregar_nodo(nodo)

# Agregar aristas
aristas = [
    ("A", "B", 4),
    ("B", "C", 7),
    ("A", "C", 5),
    ("C", "D", 5),
    ("B", "D", 2),
    ("D", "E", 1),
    ("C", "F", 3),  
    ("E", "F", 2)   
]
for desde, hacia, peso in aristas:
    grafo.agregar_arista(desde, hacia, peso)

# Función para encontrar y mostrar la mejor ruta
def mostrar_mejor_ruta(grafo, inicio, fin):
    ruta, distancia = dijkstra(grafo, inicio, fin)
    if distancia == float('inf'):
        print(f"No hay ruta disponible de {inicio} a {fin}.")
    else:
        print(f"La mejor ruta de {inicio} a {fin} es: {' -> '.join(ruta)} con una distancia de {distancia}.")

# Encontrar y mostrar las mejores rutas
rutas_a_buscar = [("A", "D"), ("A", "E"), ("A", "F"), ("B", "F")]
for inicio, fin in rutas_a_buscar:
    mostrar_mejor_ruta(grafo, inicio, fin)


